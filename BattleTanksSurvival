import turtle
import random
import time

#Base game settings
turtle.fd(0)
turtle.speed(0)
turtle.bgcolor("white")
turtle.ht()
turtle.setundobuffer(1)
turtle.tracer(0)
turtle.setup(900,900)

#Class to set up all sprites used in the game
class Sprite(turtle.Turtle):
    def __init__(self, spriteshape, color, startx, starty, heading):
        turtle.Turtle.__init__(self, shape = spriteshape)
        self.speed(0)
        self.penup()
        self.color(color)
        self.fd(0)
        self.goto(startx, starty)
        self.setheading(heading)
        self.speed = 1

    def move(self):
        self.fd(self.speed)

#Collision detection (Wall, Boundry, Boundries, Divider, Collision)
        #Main Wall
        if self.xcor() > 290:
            self.setx(290)
            self.rt(60)
        if self.xcor() < -290:
            self.setx(-290)
            self.rt(60)
        if self.ycor() > 290:
            self.sety(290)
            self.rt(60)
        if self.ycor() < -290:
            self.sety(-290)
            self.rt(60)
        #Middle Divider
        if self.xcor() < 25 and self.ycor() < 150 and \
            self.xcor() > -25 and self.ycor() > -150:
            self.rt(60)
        #Top Left Divider
        if self.xcor() < -150 and self.ycor() < 200 and \
            self.xcor() > -200 and self.ycor() > 50:
            self.rt(60)
        #Bottom Left Divider
        if self.xcor() < -150 and self.ycor() < -50 and \
            self.xcor() > -200 and self.ycor() > -200:
            self.rt(60)
        #Top Right Divider
        if self.xcor() < 200 and self.ycor() < 200 and \
            self.xcor() > 150 and self.ycor() > 50:
            self.lt(60)
        #Bottom Right Divider
        if self.xcor() < 200 and self.ycor() < -50 and \
            self.xcor() > 150 and self.ycor() > -200:
            self.rt(60)

        #Tank colliding with tank
    def collide(self, other):
        if (self.xcor() >= (other.xcor() - 10)) and \
        (self.xcor() <= (other.xcor() + 10)) and \
        (self.ycor() <= (other.ycor() + 10)) and \
        (self.ycor() >= (other.ycor() - 10)):
            return True
        else:
            return False

#Tank class and controls (Turning, Controls, Bluetank, enemytank, Setup)
#Bluetank class and setup
class Bluetank(Sprite):
     def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)
        self.speed = 10
        self.lives = 3

     def turnblue_left(self):
        self.lt(30)

     def turnblue_right(self):
        self.rt(30)

     def bluereset(self):
         self.goto(200,0)

#enemytank class and setup
class Enemy(Sprite):
    def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)
        self.speed = 6
        self.setheading(random.randint(0,360))
  
#Class for graphics (draw boarder, draw wall)
class Boarders():
    def __init__(self):
        self.state = "playing"
        self.pen = turtle.Turtle()
        self.pen.hideturtle()
       
    def draw_boarder(self):
        self.pen.speed(0)
        self.pen.color("black")
        self.pen.pensize(3)
        self.pen.penup()
        self.pen.goto(-300,300)
        self.pen.pendown()
        #Main Wall
        for side in range(4):
            self.pen.fd(600)
            self.pen.rt(90)
        self.pen.penup()
        self.pen.ht()
        #Top Left Divider
        self.pen.goto(-200,200)
        self.pen.pendown()
        self.pen.fillcolor('black')
        self.pen.begin_fill()
        for TLD in range(2):
            self.pen.fd(50)
            self.pen.rt(90)
            self.pen.fd(150)
            self.pen.rt(90)
        self.pen.end_fill()
        self.pen.penup()
        self.pen.ht()
        #Bottom Left Divider
        self.pen.goto(-200,-200)
        self.pen.pendown()
        self.pen.fillcolor('black')
        self.pen.begin_fill()
        for BLD in range(2):
            self.pen.fd(50)
            self.pen.lt(90)
            self.pen.fd(150)
            self.pen.lt(90)
        self.pen.end_fill()
        self.pen.penup()
        self.pen.ht()
        #Top Right Divider
        self.pen.goto(150,200)
        self.pen.pendown()
        self.pen.fillcolor('black')
        self.pen.begin_fill()
        for TRD in range(2):
            self.pen.fd(50)
            self.pen.rt(90)
            self.pen.fd(150)
            self.pen.rt(90)
        self.pen.end_fill()
        self.pen.penup()
        self.pen.ht()
        #Bottom Right Divider
        self.pen.goto(150,-200)
        self.pen.pendown()
        self.pen.fillcolor('black')
        self.pen.begin_fill()
        for BRD in range(2):
            self.pen.fd(50)
            self.pen.lt(90)
            self.pen.fd(150)
            self.pen.lt(90)
        self.pen.end_fill()
        self.pen.penup()
        self.pen.ht()
        #Middle Divider
        self.pen.goto(-25,150)
        self.pen.pendown()
        self.pen.fillcolor('black')
        self.pen.begin_fill()
        for BRD in range(2):
            self.pen.fd(50)
            self.pen.rt(90)
            self.pen.fd(300)
            self.pen.rt(90)
        self.pen.end_fill()
        self.pen.penup()
        self.pen.ht()

#Class for the blue side of the scoreboard
class BlueControl():
    def __init__(self):
        self.bluescore = 0
        self.bluelives = 3
        self.currentlevel = 1

        self.bluepen = turtle.Turtle()
        self.state = "playing"
        self.bluepen.color("black")
        self.bluepen.hideturtle()
        self.bluepen.pensize(3)
        self.bluepen.penup()

        self.lifepen = turtle.Turtle()
        self.lifepen.color("black")
        self.lifepen.hideturtle()
        self.lifepen.pensize(3)
        self.lifepen.penup()

        self.level = turtle.Turtle()
        self.level.color("black")
        self.level.hideturtle()
        self.level.pensize(3)
        self.level.penup()

        self.bluepen.goto(300,370)
        msg = "Controls:"
        self.bluepen.pendown()
        self.bluepen.write(msg, align = "right", font=("Arial", 16, "normal",))
        self.bluepen.penup()

        self.bluepen.goto(300, 340)
        self.bluepen.pendown()
        msg = "Move = Arrow Keys"
        self.bluepen.write(msg, align = "right",font=("Arial", 16, "normal"))
        self.bluepen.penup()

        self.bluepen.goto(300,310)
        self.bluepen.pendown()
        msg = "Reset = U"
        self.bluepen.write(msg, align = "right",font=("Arial", 16, "normal"))
        self.bluepen.penup()

        #show the score
    def show_bluestatus(self):
        self.bluepen.undo()
        msg = "%s" %(self.bluescore)
        self.bluepen.penup()
        self.bluepen.goto(0,310)
        self.bluepen.write(msg, align = "center", font=("Arial", 16, "normal"))

        #life sprites
    def lifesystem(self):
        self.life1 = turtle.Turtle()
        self.life1.hideturtle()
        self.life1.penup()
        self.life1.shape("classic")
        self.life1.color("blue")
        self.life1.setheading(90)
        self.life1.shapesize(stretch_len = 3, stretch_wid = 3)
        self.life1.goto(-275, 350)
        self.life1.showturtle()

        self.life2 = turtle.Turtle()
        self.life2.hideturtle()
        self.life2.penup()
        self.life2.shape("classic")
        self.life2.color("blue")
        self.life2.setheading(90)
        self.life2.shapesize(stretch_len = 3, stretch_wid = 3)
        self.life2.goto(-225, 350)
        self.life2.showturtle()

        self.life3 = turtle.Turtle()
        self.life3.hideturtle()
        self.life3.penup()
        self.life3.shape("classic")
        self.life3.color("blue")
        self.life3.setheading(90)
        self.life3.shapesize(stretch_len = 3, stretch_wid = 3)
        self.life3.goto(-175, 350)
        self.life3.showturtle()
    
        #remove a life sprite if hit
    def removelife(self):
        if self.bluelives == 2:
            self.life1.hideturtle()
        if self.bluelives == 1:
            self.life2.hideturtle()
        if self.bluelives == 0:
            self.life3.hideturtle()

        #show the current level
    def levelup(self):
        self.level.undo()
        msg = "Level %s" %(self.currentlevel)
        self.level.penup()
        self.level.goto(0,340)
        self.level.write(msg, align = "center", font=("Arial", 32, "bold"))

        #lose screen
    def gameover(self):
        self.endgame = turtle.Turtle()
        self.endgame.hideturtle()
        self.endgame.penup()
        self.endgame.goto(-900,900)
        self.endgame.fillcolor('black')
        self.endgame.begin_fill()
        for i in range(4):
            self.endgame.fd(1800)
            self.endgame.rt(90)
        self.endgame.end_fill()
        self.endgame.goto(0,200)
        self.endgame.color('white')
        msg = "Game Over"
        self.endgame.write(msg, align = 'center', font=("Arial", 48, "normal"))
        self.endgame.goto(0, 100)
        msg = "Your Score = %s" %(self.bluescore)
        self.endgame.write(msg, align = 'center', font=("Arial", 24, "normal"))

        #win screen
    def gamewon(self):
        self.wingame = turtle.Turtle()
        self.wingame.hideturtle()
        self.wingame.penup()
        self.wingame.goto(-900,900)
        self.wingame.fillcolor('black')
        self.wingame.begin_fill()
        for i in range(4):
            self.wingame.fd(1800)
            self.wingame.rt(90)
        self.wingame.end_fill()
        self.wingame.goto(0,200)
        self.wingame.color('white')
        msg = "Congrats, You Won!!!"
        self.wingame.write(msg, align = 'center', font=("Arial", 48, "normal"))
        self.wingame.goto(0, 100)
        msg = "Your Score = %s" %(self.bluescore)
        self.wingame.write(msg, align = 'center', font=("Arial", 24, "normal"))
        #get rid of remaining lives
    def hideremaining(self):
        self.life1.ht()
        self.life2.ht()
        self.life3.ht()

#Make classes into objects
boarders= Boarders()
blueboard = BlueControl()
#Draw the games border
boarders.draw_boarder()
blueboard.show_bluestatus()
blueboard.lifesystem()
blueboard.removelife()
blueboard.levelup()

#Create all Sprites
#Tanks
bluetank = Bluetank("classic", "blue" ,200, 0, 180)
enemies = []
for i in range(15):
    x = random.randint(-275 ,-225)
    y = random.randint(-275,275)
    enemies.append(Enemy("circle", "red",x, y, 0))

#Controls
turtle.onkey(bluetank.turnblue_left, 'Left')
turtle.onkey(bluetank.turnblue_right, 'Right')
turtle.onkey(bluetank.bluereset, 'u')
turtle.listen()

#Main game loop
while True:
    turtle.update()
    time.sleep(0.05)
    if blueboard.bluelives > 0:
        blueboard.bluescore += 1
    blueboard.show_bluestatus()
    blueboard.levelup()
    bluetank.move()
    
    for enemy in enemies:
        enemy.move()
        #Check for collisions between tank and enemy
        if bluetank.collide(enemy):
            x = random.randint(-275,275)
            y = random.randint(-275,275)
            enemy.goto(x,y)
            bluetank.goto(200,0)
            blueboard.bluelives -= 1
            blueboard.removelife()

    #Lost game screen
    if blueboard.bluelives == 0:
        blueboard.gameover()
        bluetank.ht()
        for enemy in enemies:
            enemy.ht()

    #level 2
    if blueboard.bluescore == 500:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 3
    if blueboard.bluescore == 1000:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 4
    if blueboard.bluescore == 1500:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 5
    if blueboard.bluescore == 2000:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 6
    if blueboard.bluescore == 2500:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 7
    if blueboard.bluescore == 3000:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 8
    if blueboard.bluescore == 3500:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #level 9
    if blueboard.bluescore == 4000:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
     #level 10
    if blueboard.bluescore == 4500:
        blueboard.currentlevel += 1
        for enemy in enemies:
            enemy.speed += 2
    #Game Won
    if blueboard.bluescore == 5000:
       blueboard.gamewon()
       bluetank.ht()
       blueboard.hideremaining()
       for enemy in enemies:
           enemy.ht()
